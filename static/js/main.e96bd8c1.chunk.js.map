{"version":3,"sources":["componenets/input.js","componenets/pokemon.js","App.js","serviceWorker.js","index.js"],"names":["styles","container","display","flexDirection","justifyContent","alignItems","input","margin","button","backgroundColor","color","textTransform","Input","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInput","event","setState","value","target","onSubmit","e","state","length","onInputSubmit","toLowerCase","_this2","react_default","a","createElement","style","TextField","label","placeholder","variant","InputLabelProps","shrink","onChange","onKeyPress","ev","key","preventDefault","Button","onClick","Component","card","width","height","top","sprite","bottom","Pokemon","str","charAt","toUpperCase","substr","isNaN","types","map","i","firstUpper","Card","attachPound","number","name","src","alt","renderTypes","title","fontSize","inputs","padding","App","PokeAPI","bind","assertThisInitialized","PokeAPIitem","entry","stats","moves","weight","fetch","concat","then","response","ok","failedRespones","console","log","Math","floor","random","json","data","newTypes","forEach","push","type","newStats","stat","base_stat","effort","newMoves","move","version_group_details","sprites","front_default","id","item","_this3","default","className","input_Input","pokemon_Pokemon","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e96bd8c1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  input: {\n    margin: '10px'\n  },\n  button: {\n    backgroundColor: '#ee1515',\n    color: 'white',\n    margin: '0px 5px',\n    textTransform: 'none'\n  }\n}\n\nexport default class Input extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      value: ''\n    }\n  }\n\n  onInput = (event) => {\n    this.setState({ value: event.target.value })\n  }\n\n  onSubmit = (e) => {\n    if (this.state.value.length > 0)\n      this.props.onInputSubmit(this.state.value.toLowerCase())\n  }\n\n  render() {\n    return (\n      <div style={styles.container}>\n        <TextField\n          // id=\"outlined-full-width\"\n          label=\"Name or Number\"\n          style={styles.input}\n          placeholder=\"Charmander\"\n          // helperText=\"Type a name or entry number\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          InputLabelProps={{\n            shrink: true\n          }}\n          onChange={this.onInput}\n          value={this.state.value}\n          onKeyPress={(ev) => {\n            if (ev.key === 'Enter') {\n              ev.preventDefault()\n              this.onSubmit()\n            }\n          }}\n        />\n        <Button\n          variant=\"outlined\"\n          style={styles.button}\n          onClick={this.onSubmit}\n        >\n          Submit\n        </Button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Card from '@material-ui/core/Card'\nconst styles = {\n  card: {\n    margin: '20px',\n    width: '200px',\n    height: '200px',\n    display: 'flex',\n    backgroundColor: '#f0f0f0',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  top: {\n    margin: '10px'\n  },\n  sprite: { margin: '-15px' },\n  bottom: { margin: '10px' }\n}\n\nexport default class Pokemon extends Component {\n  firstUpper(str) {\n    if (typeof str === 'undefined') return null\n    return str.charAt(0).toUpperCase() + str.substr(1)\n  }\n\n  attachPound(str) {\n    if (isNaN(str) || str.length === 0) return str\n    return '#' + str\n  }\n\n  renderTypes() {\n    return (\n      <div style={styles.bottom}>\n        {this.props.types.map((e, i) => {\n          if (i !== this.props.types.length - 1) {\n            return this.firstUpper(e) + ', '\n          }\n          return this.firstUpper(e)\n        })}\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <Card style={styles.card}>\n        <div style={styles.top}>\n          {this.attachPound(this.props.number)}{' '}\n          {this.firstUpper(this.props.name)}\n        </div>\n        <div style={styles.sprite}>\n          <img\n            style={{ width: '150px', height: '150px' }}\n            src={this.props.sprite}\n            alt=\"pokemon sprite\"\n          />\n        </div>\n        {this.renderTypes()}\n      </Card>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport Input from './componenets/input'\nimport Pokemon from './componenets/pokemon'\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  title: { margin: '20px', fontSize: '24px' },\n  inputs: { padding: '10px' }\n}\n\n// #ee1515 red\n// #f00000 red\n// #222224 black\n// #f0f0f0 white\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.PokeAPI = this.PokeAPI.bind(this)\n    this.PokeAPIitem('4')\n\n    this.state = {\n      entry: '',\n      name: '',\n      sprite: '',\n      types: [],\n      stats: [],\n      moves: [],\n      height: 0,\n      weight: 0\n    }\n  }\n\n  PokeAPI(entry) {\n    fetch(`https://pokeapi.co/api/v2/pokemon/${entry}/`)\n      .then((response) => {\n        if (!response.ok) {\n          let failedRespones = [\n            'You missed the Pokemon!',\n            'Darn! The Pokemon broke free!',\n            'Aww! It appeared to be caught!',\n            'Shoot! It was so close too!'\n          ]\n          console.log(\n            failedRespones[Math.floor(Math.random() * failedRespones.length)]\n          )\n          return false\n        }\n        return response.json()\n      })\n      .then((data) => {\n        if (!data) return\n        // console.log(data)\n\n        let newTypes = []\n        data.types.forEach((e) => {\n          newTypes.push(e.type.name)\n        })\n\n        let newStats = []\n        data.stats.forEach((e) => {\n          newStats.push({\n            name: e.stat.name,\n            base_stat: e.base_stat,\n            effort: e.effort\n          })\n        })\n\n        let newMoves = []\n        data.moves.forEach((e, i) => {\n          newMoves.push({\n            name: e.move.name,\n            version_group_details: e.version_group_details\n          })\n        })\n\n        this.setState({\n          name: data.name,\n          sprite: data.sprites.front_default,\n          entry: data.id,\n          types: newTypes,\n          stats: newStats,\n          moves: newMoves,\n          height: data.height,\n          weight: data.weight\n        })\n        console.log(\n          `All right! ${data.name.charAt(0).toUpperCase() +\n            data.name.substr(1)} was caught!`\n        )\n      })\n  }\n\n  PokeAPIitem(item) {\n    fetch(`https://pokeapi.co/api/v2/item/${item}/`)\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        this.setState({\n          name: data.name,\n          sprite: data.sprites.default,\n          entry: '',\n          types: []\n        })\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\" style={styles.container}>\n        <div style={styles.title}>Pokédex Lookup</div>\n        <div style={styles.inputs}>\n          <Input onInputSubmit={this.PokeAPI} />\n        </div>\n        <Pokemon\n          name={this.state.name}\n          number={this.state.entry}\n          sprite={this.state.sprite}\n          types={this.state.types}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}