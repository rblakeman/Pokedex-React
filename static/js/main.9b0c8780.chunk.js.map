{"version":3,"sources":["componenets/input.js","componenets/pokemon.js","App.js","serviceWorker.js","index.js"],"names":["styles","container","display","flexDirection","justifyContent","alignItems","text","margin","button","Input","state","value","onInput","event","_this","setState","target","onSubmit","e","length","props","onInputSubmit","toLowerCase","react_default","a","createElement","style","TextField","id","label","placeholder","variant","InputLabelProps","shrink","onChange","this","Button","color","onClick","Component","card","width","height","backgroundColor","top","sprite","bottom","Pokemon","str","charAt","toUpperCase","substr","isNaN","types","map","i","firstUpper","Card","attachPound","number","name","src","alt","renderTypes","title","inputs","padding","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","entry","PokeAPI","bind","assertThisInitialized","PokeAPIitem","_this2","fetch","concat","then","response","ok","json","console","log","data","sprites","front_default","forEach","newTypes","push","type","item","_this3","default","className","input_Input","pokemon_Pokemon","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b0c8780.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    margin: 10\n  },\n  button: {\n    margin: 10\n  }\n}\n\nexport default class Input extends Component {\n  state = {\n    value: ''\n  }\n\n  onInput = (event) => {\n    this.setState({ value: event.target.value })\n  }\n\n  onSubmit = (e) => {\n    if (this.state.value.length > 0)\n      this.props.onInputSubmit(this.state.value.toLowerCase())\n  }\n\n  render() {\n    return (\n      <div style={styles.container}>\n        <TextField\n          id=\"outlined-full-width\"\n          label=\"Name or Number\"\n          style={styles.text}\n          placeholder=\"Charmander\"\n          // helperText=\"Type a name or entry number\"\n          margin=\"normal\"\n          variant=\"outlined\"\n          InputLabelProps={{\n            shrink: true\n          }}\n          onChange={this.onInput}\n          value={this.state.value}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          style={styles.button}\n          onClick={this.onSubmit}\n        >\n          Submit\n        </Button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Card from '@material-ui/core/Card'\nconst styles = {\n  card: {\n    margin: 20,\n    width: 200,\n    height: 200,\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#eee',\n    alignItems: 'center'\n  },\n  top: {\n    margin: 10\n  },\n  sprite: { margin: -15 },\n  bottom: { margin: 10 }\n}\n\nexport default class Pokemon extends Component {\n  firstUpper(str) {\n    return str.charAt(0).toUpperCase() + str.substr(1)\n  }\n\n  attachPound(str) {\n    if (isNaN(str) || str.length === 0) return str\n    return '#' + str\n  }\n\n  renderTypes() {\n    return (\n      <div style={styles.bottom}>\n        {this.props.types.map((e, i) => {\n          if (i !== this.props.types.length - 1) {\n            return this.firstUpper(e) + ', '\n          }\n          return this.firstUpper(e)\n        })}\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <Card style={styles.card}>\n        <div style={styles.top}>\n          {this.attachPound(this.props.number)}{' '}\n          {this.firstUpper(this.props.name)}\n        </div>\n        <div style={styles.sprite}>\n          <img\n            style={{ width: 150, height: 150 }}\n            src={this.props.sprite}\n            alt=\"pokemon sprite\"\n          />\n        </div>\n        {this.renderTypes()}\n      </Card>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport Input from './componenets/input'\nimport Pokemon from './componenets/pokemon'\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  title: { margin: 20 },\n  inputs: { padding: 10 }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.PokeAPI = this.PokeAPI.bind(this)\n    this.PokeAPIitem('4')\n  }\n\n  state = {\n    entry: '',\n    name: '',\n    sprite: '',\n    types: []\n  }\n\n  PokeAPI(entry) {\n    fetch(`https://pokeapi.co/api/v2/pokemon/${entry}/`)\n      .then((response) => {\n        if (!response.ok) {\n          console.log('caught')\n          return\n        }\n        return response.json()\n      })\n      .then((data) => {\n        this.setState({ types: [] })\n        this.setState({\n          name: data.name,\n          sprite: data.sprites.front_default,\n          entry: data.id\n        })\n        data.types.forEach((e, i) => {\n          let newTypes = this.state.types\n          newTypes.push(data.types[i].type.name)\n          this.setState({ types: newTypes })\n        })\n      })\n  }\n\n  PokeAPIitem(item) {\n    fetch(`https://pokeapi.co/api/v2/item/${item}/`)\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        this.setState({\n          name: data.name,\n          sprite: data.sprites.default,\n          entry: '',\n          types: []\n        })\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\" style={styles.container}>\n        <div style={styles.title}>Pokedex Lookup</div>\n        <div style={styles.inputs}>\n          <Input onInputSubmit={this.PokeAPI} />\n        </div>\n        <Pokemon\n          name={this.state.name}\n          number={this.state.entry}\n          sprite={this.state.sprite}\n          types={this.state.types}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}